{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "beforeEach",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddConsecutiveSegment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddDynamicConsecutiveSegment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddStation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddTrain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testBuyDynamicTicketWithSufficientEther",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testCalculateTotalTicketPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testCannotAddConsecutiveSegmentWithNonExistentStations",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testCannotBuyTicketIfTrainIsFull",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testContractInitialization",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testModifiedArrivalTimeIsSavedCorrectly",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanAddConsecutiveSegment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanAddDynamicConsecutiveSegment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanAddOrRemoveFromBlacklist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanAddStation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanAddTrain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanExecuteFunctionsRequiringOnlyOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testOnlyOwnerCanModifyArrivalTime",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testRefundsCalculatedCorrectlyBasedOnDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testRefundsTransferredCorrectlyToUserAddresses",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testUserCannotBuyTicketWhenAddedToBlacklist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testUserInBlacklistCannotBuyTicket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"testAddTrain()": {
					"notice": "#sender: account_0"
				},
				"testOnlyOwnerCanAddTrain()": {
					"notice": "#sender: account_1"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/DataContractTest_all_test.sol": "testSuite"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"SmartContracts/DataContract.sol": {
			"keccak256": "0x1976d2d139a45a403867b013cd05359148b60a2160e39e8499372f030d7e49cd",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fcad56059856e35b5a8676778de5ed7db2679294aaa00c3652ca4b1e4b6c8b3e",
				"dweb:/ipfs/QmSdMC2AaBZ2apQ1e2XqNjkjz6vNkaMs7xQ2TsG9gSHGkP"
			]
		},
		"Testing/DataContractTest_all.sol": {
			"keccak256": "0x6cd0ff8ea4a24d766401aa9324cbfd49d826c9653e7e39f52f5bd57f407f9405",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://174c963a4deab16e803b67be408fb49286896d0dd869db1ffd8778de0b9f1b85",
				"dweb:/ipfs/QmTA6xTMZ7gZ5XZnwLWb27DLmWGPCxqsoPfwf8XQiaBMeA"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0xab088ffd1cd1033f54c2486f151b5d02281a3b76724c8e6f48479c25a4f7809e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5ddaf9976b1838f7028cbedfaf7f6e1cf8c898e100221176ff1406ee8b599f23",
				"dweb:/ipfs/QmX2FYLXYyo5Cn55ZX2CfngpscSh4mQhcMVzQdQsh2vqcG"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/DataContractTest_all_test.sol": {
			"keccak256": "0x9e428ad99e16a33d772f4418f657849c7c8ad2f0ebec543efdee8ec53b9c60cb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f1d785d77849b7bf85665cb24882c7508e25e6a96529837e01218b85460f6d2a",
				"dweb:/ipfs/QmTK2ebHY4PGj4U7bi1fkdCz777K1Y9aiRDb3RpC9Bo88w"
			]
		}
	},
	"version": 1
}